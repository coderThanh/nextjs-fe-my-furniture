import Head from "next/head";
import Layout, { LayoutAsideType, LayoutType } from "@/components-root/layout";

import Gap from "@/components-root/gap";

import { useEffect } from "react";
import classNames from "classnames";

import useSWR, { SWRConfig } from "swr";
import { fetcherGraphSQL } from "@/services/fetcher";
import GraphQLQuery from "@/models/graphql/graphql-query";
import { getMenuAndchildrent } from "@/services/menus";
import SWRKey from "@/models/swr-key";
import { PageHomeRes } from "@/models/page-home-res";
import { HomeHotBlog } from "@/ui-child/page-home/home-hot-blog";
import { HomePostByCategoryAndStyle } from "@/ui-child/page-home/home-category-style-blog";
import { HomePostByCategoryDemo } from "@/ui-child/page-home/home-demo-category-blog";
import { HomeHotBlogDemo } from "@/ui-child/page-home/home-demo-hot-blog";
import Header from "@/ui-child/header";
import Footer from "@/ui-child/footer";

export type HomeProps = {
  fallback: { string: Promise<any> };
};

export default function Home(props: HomeProps) {
  useEffect(() => {
    async function testApi() {
      const homeRes = await fetcherGraphSQL<PageHomeRes>(
        GraphQLQuery.getPageHomeData,
        {
          numbers: 6,
        }
      );

      console.log("homeRes ", homeRes.pageHome.data.attributes);
    }
    // testApi();
  }, []);

  // console.log("props.fallback", props.fallback);

  return (
    <>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <SWRConfig value={{ fallback: props.fallback }}>
        <Layout
          classMain="home-page"
          type={LayoutType.container}
          asideType={LayoutAsideType.no}
          header={<Header />}
          footer={<Footer />}
        >
          <Gap large={30} small={20} />
          <HomeHotBlog />
          <HomePostByCategoryAndStyle />
          {!process.env.NEXT_PUBLIC_HAS_API_DB_CONECT && <HomeHotBlogDemo />}
          {!process.env.NEXT_PUBLIC_HAS_API_DB_CONECT && (
            <HomePostByCategoryDemo title="Chuyện nhà" />
          )}
          {!process.env.NEXT_PUBLIC_HAS_API_DB_CONECT && (
            <HomePostByCategoryDemo title="Xu hướng" />
          )}
          {!process.env.NEXT_PUBLIC_HAS_API_DB_CONECT && (
            <HomePostByCategoryDemo title="Minimalism" />
          )}
          {!process.env.NEXT_PUBLIC_HAS_API_DB_CONECT && (
            <HomePostByCategoryDemo title="Zen" />
          )}
          <Gap large={70} medium={50} small={30} />
        </Layout>
      </SWRConfig>
    </>
  );
}

// fetching
export async function getStaticProps() {
  //hook getStaticProps can't run swr

  if (process.env.NEXT_PUBLIC_HAS_API_DB_CONECT) {
    // Get menus res
    const menuHeaderBottomRes = fetcherGraphSQL(
      GraphQLQuery.getMenuHeaderParent,
      {
        slug: process.env.NEXT_PUBLIC_MENU_HEADER_BOTTOM_SLUG,
      }
    );

    const menuHeaderMiddleRes = await getMenuAndchildrent(
      process.env.NEXT_PUBLIC_MENU_HEADER_MIDDLE_SLUG,
      true
    );

    // Get page home res
    const pageHomeRes = await fetcherGraphSQL<PageHomeRes>(
      GraphQLQuery.getPageHomeData,
      { numbers: 6 }
    );

    // const menuHeaderMiddleRes = fetcher(AppApi.menuHeaderMiddle);

    const [menuHeaderBottomData, menuHeaderMiddleData, pageHomeData] =
      await Promise.all([
        menuHeaderBottomRes,
        menuHeaderMiddleRes,
        pageHomeRes,
      ]);

    return {
      props: {
        fallback: {
          [SWRKey.headerBottom]: menuHeaderBottomData,
          [SWRKey.headerMiddle]: menuHeaderMiddleData,
          [SWRKey.pageHomeRes]: pageHomeData,
        },
      },
    };
  }

  return { props: { fallback: {} } };
}
